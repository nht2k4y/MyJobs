import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, useLocation  } from 'react-router-dom';
import {
    FaArrowLeft, FaBriefcase, FaBuilding, FaFileAlt,
    FaBullseye, FaGift, FaEnvelope, FaRegCalendarAlt, FaClock
} from 'react-icons/fa';
import { useAuth } from '../../context/AuthContext';

export default function JobDetailPage() {
    const { id } = useParams();
    const [job, setJob] = useState(null);
    const [showForm, setShowForm] = useState(false); // D√≤ng cho showForm
    const [isSubmitting, setIsSubmitting] = useState(false); // D√≤ng cho isSubmitting
    const navigate = useNavigate();
    // const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitError, setSubmitError] = useState('');
    const location = useLocation();
    const { user } = useAuth()
    

    // === GI·ªÆ NGUY√äN LOGIC FETCH K·∫æT H·ª¢P 2 API NH∆ØNG S·ª¨A L·∫†I C√ÅCH G·ªòP D·ªÆ LI·ªÜU ===
    useEffect(() => {
        const fetchJobData = async () => {
            try {
                // 1. G·ªçi API chi ti·∫øt ƒë·ªÉ l·∫•y c√°c tr∆∞·ªùng description, requirements V√Ä employer_id
                const detailRes = await fetch(`http://localhost:8000/job-posts/${id}`);
                if (!detailRes.ok) throw new Error("Kh√¥ng t√¨m th·∫•y chi ti·∫øt c√¥ng vi·ªác");
                const jobDetailData = await detailRes.json();

                // 2. G·ªçi API danh s√°ch ƒë·ªÉ l·∫•y logo_url v√† poster_name ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω s·∫µn
                const listRes = await fetch(`http://localhost:8000/job-posts`);
                if (!listRes.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¥ng vi·ªác");
                const jobListData = await listRes.json();
                
                const jobListItem = jobListData.find(item => item.id.toString() === id);

                // 3. K·∫øt h·ª£p d·ªØ li·ªáu
                const combinedJobData = {
                    ...jobDetailData, // N·ªÅn l√† d·ªØ li·ªáu chi ti·∫øt
                    // L·∫•y logo v√† t√™n t·ª´ danh s√°ch n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng l·∫°i t·ª´ chi ti·∫øt
                    logo_url: jobListItem?.logo_url || jobDetailData.logo_url,
                    poster_name: jobListItem?.poster_name || jobDetailData.employer?.company_info?.company_name,
                    // QUAN TR·ªåNG: ƒê·∫£m b·∫£o employer_id lu√¥n t·ªìn t·∫°i t·ª´ API chi ti·∫øt
                    employer_id: jobDetailData.employer_id, 
                };
                
                console.log("üî• D·ªÆ LI·ªÜU K·∫æT H·ª¢P CU·ªêI C√ôNG:", combinedJobData);
                setJob(combinedJobData);

            } catch (err) {
                console.error("L·ªói khi fetch d·ªØ li·ªáu c√¥ng vi·ªác:", err);
                setJob(null);
            }
        };

        fetchJobData();
    }, [id]);

    // B∆Ø·ªöC 3: H√†m ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi m·ªü form
    const handleApplyClick = () => {
        if (!user) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ·ª©ng tuy·ªÉn!");
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login v√† l∆∞u l·∫°i trang hi·ªán t·∫°i ƒë·ªÉ quay v·ªÅ
            navigate('/login', { state: { from: location } }); 
            return;
        }

        if (user.role !== 'jobseeker') {
            alert("Ch·ªâ t√†i kho·∫£n Ng∆∞·ªùi t√¨m vi·ªác m·ªõi c√≥ th·ªÉ ·ª©ng tuy·ªÉn.");
            return;
        }

        // N·∫øu m·ªçi th·ª© h·ª£p l·ªá, m·ªü form ·ª©ng tuy·ªÉn
        setShowForm(true);
    };
    
    const handleSubmit = async (e) => {
        e.preventDefault(); // NgƒÉn trang t·∫£i l·∫°i
        setIsSubmitting(true);
        setSubmitError('');

        const form = e.target;
        const formData = new FormData();

        // 1. L·∫•y d·ªØ li·ªáu t·ª´ c√°c input, select, textarea
        formData.append('full_name', form.full_name.value);
        formData.append('gender', form.gender.value);
        formData.append('email', form.email.value);
        formData.append('phone', form.phone.value);
        formData.append('birth_year', form.birth_year.value);
        formData.append('preferred_location', form.preferred_location.value);
        formData.append('cover_letter', form.cover_letter.value);
        
        // 2. L·∫•y d·ªØ li·ªáu t·ª´ c√°c radio button
        // L∆∞u √Ω: ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt radio ƒë∆∞·ª£c ch·ªçn cho m·ªói nh√≥m
        const experiencePlaces = form.querySelector('input[name="experience_places"]:checked');
        const certificates = form.querySelector('input[name="certificates"]:checked');
        
        if (experiencePlaces) {
            formData.append('experience_places', experiencePlaces.value);
        } else {
            // X·ª≠ l√Ω n·∫øu ng∆∞·ªùi d√πng ch∆∞a ch·ªçn (m·∫∑c d√π c√≥ 'required', nh∆∞ng ƒë√¢y l√† ph√≤ng v·ªá)
            setSubmitError("Vui l√≤ng ch·ªçn n∆°i b·∫°n ƒë√£ c√≥ kinh nghi·ªám l√†m vi·ªác.");
            setIsSubmitting(false);
            return;
        }
        
        if (certificates) {
            formData.append('certificates', certificates.value);
        } else {
            setSubmitError("Vui l√≤ng ch·ªçn ch·ª©ng ch·ªâ ngo·∫°i ng·ªØ c·ªßa b·∫°n.");
            setIsSubmitting(false);
            return;
        }

        // 3. X·ª≠ l√Ω checkbox (tr∆∞·ªùng experience_fields m√† API nh·∫≠n l√† list)
        const checkedFields = form.querySelectorAll('input[name="experience_fields"]:checked');
        if (checkedFields.length === 0) {
            setSubmitError("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lƒ©nh v·ª±c kinh nghi·ªám.");
            setIsSubmitting(false);
            return;
        }
        // API c·ªßa b·∫°n nh·∫≠n List[str], FormData c√≥ th·ªÉ g·ª≠i nhi·ªÅu gi√° tr·ªã v·ªõi c√πng m·ªôt key
        checkedFields.forEach(checkbox => {
            formData.append('experience_fields', checkbox.value);
        });
        
        // 4. L·∫•y file CV
        const cvFile = form.cv.files[0];
        if (cvFile) {
            formData.append('cv', cvFile);
        } else {
            setSubmitError("Vui l√≤ng t·∫£i l√™n CV c·ªßa b·∫°n.");
            setIsSubmitting(false);
            return;
        }
        
        // 5. Th√™m ID c·ªßa c√¥ng vi·ªác ƒëang ·ª©ng tuy·ªÉn
        formData.append('job_id', id);

        // --- G·ª¨I D·ªÆ LI·ªÜU ƒê·∫æN API ---
        try {
            const response = await fetch('http://localhost:8000/apply', { // <-- Endpoint c·ªßa b·∫°n
                method: 'POST',
                body: formData, // Khi d√πng FormData, tr√¨nh duy·ªát t·ª± ƒë·∫∑t Content-Type
            });

            if (!response.ok) {
                // C·ªë g·∫Øng ƒë·ªçc l·ªói t·ª´ server ƒë·ªÉ hi·ªÉn th·ªã
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.detail || `L·ªói m√°y ch·ªß: ${response.statusText}`);
            }

            // Th√†nh c√¥ng
            alert('H·ªì s∆° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
            setShowForm(false); // ƒê√≥ng form sau khi g·ª≠i

        } catch (error) {
            console.error('L·ªói khi ·ª©ng tuy·ªÉn:', error);
            setSubmitError(`G·ª≠i h·ªì s∆° th·∫•t b·∫°i: ${error.message}`);
            // Kh√¥ng ƒë√≥ng form ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠a l·ªói
        } finally {
            setIsSubmitting(false); // K·∫øt th√∫c tr·∫°ng th√°i "ƒëang g·ª≠i"
        }
    };
    const formatDate = (dateString) => {
        if (!dateString) return 'Ch∆∞a c·∫≠p nh·∫≠t';
        const date = new Date(dateString);
        return isNaN(date.getTime()) ? 'Ng√†y kh√¥ng h·ª£p l·ªá' : date.toLocaleDateString('vi-VN');
    };

    if (!job) return (
        <div className="flex justify-center items-center h-screen bg-gray-50">
            <p className="text-lg text-gray-500">ƒêang t·∫£i d·ªØ li·ªáu ho·∫∑c kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác...</p>
        </div>
    );
    
    // H√†m ƒëi·ªÅu h∆∞·ªõng s·∫Ω ho·∫°t ƒë·ªông v√¨ 'job.employer_id' ƒë√£ ƒë∆∞·ª£c th√™m v√†o
    const navigateToCompanyProfile = () => {
        if (job && job.employer_id) {
            // S·ª≠a l·∫°i path cho ƒë√∫ng v·ªõi router c·ªßa b·∫°n
            navigate(`/company/${job.employer_id}`);
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y employer_id ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.");
        }
    };
    
    // Giao di·ªán gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi
    return (
        <div className="bg-gray-50 min-h-screen py-12">
            <div className="container mx-auto px-4">
                <div className="mb-6 flex justify-between items-center">
                    <button onClick={() => navigate('/jobs')} className="flex items-center gap-2 text-gray-600 hover:text-[#441da0] font-semibold transition">
                        <FaArrowLeft />
                        <span>Quay l·∫°i danh s√°ch</span>
                    </button>
                </div>
                
                <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                    <div className="p-8 border-b">
                        <div className="flex flex-col sm:flex-row items-start gap-6">
                             {/* B·ªè g·∫°ch ch√¢n v√† th√™m onClick */}
                            <div
                                onClick={navigateToCompanyProfile}
                                className="cursor-pointer transition-transform hover:scale-105"
                                title="Xem trang c√¥ng ty"
                            >
                                <img
                                    src={job.logo_url ? `http://localhost:8000${job.logo_url}` : 'https://via.placeholder.com/150'}
                                    alt="Logo c√¥ng ty"
                                    className="w-24 h-24 rounded-xl object-contain border p-2 flex-shrink-0"
                                />
                            </div>
                            <div className="flex-1">
                                <h1 className="text-3xl font-bold text-gray-900 mb-2">{job.title}</h1>
                                <div
                                    className="text-lg font-semibold text-[#441da0] cursor-pointer hover:text-indigo-700 transition-colors mb-3"
                                    onClick={navigateToCompanyProfile}
                                >
                                    {job.poster_name || "T√™n c√¥ng ty"}
                                </div>
                                <div className="flex flex-wrap items-center gap-x-6 gap-y-2 text-gray-500 text-sm">
                                    <div className="flex items-center"><FaBriefcase className="mr-2"/><span>{job.position}</span></div>
                                    <div className="flex items-center"><FaRegCalendarAlt className="mr-2"/><span>ƒêƒÉng ng√†y: {formatDate(job.created_at)}</span></div>
                                    {job.deadline && <div className="flex items-center text-red-600 font-medium"><FaClock className="mr-2"/><span>H·∫°n n·ªôp: {formatDate(job.deadline)}</span></div>}
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* N·ªôi dung chi ti·∫øt s·∫Ω hi·ªÉn th·ªã */}
                    <div className="p-8 space-y-8">
                                            <div className="job-section">
                                                <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3"><FaBuilding className="text-[#441da0]"/>Gi·ªõi thi·ªáu c√¥ng ty</h2>
                                                <p className="whitespace-pre-line text-gray-700 leading-relaxed">{job.company_intro || "Ch∆∞a cung c·∫•p th√¥ng tin."}</p>
                                            </div>
                                            <div className="job-section">
                                                <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3"><FaFileAlt className="text-[#441da0]"/>M√¥ t·∫£ c√¥ng vi·ªác</h2>
                                                <p className="whitespace-pre-line text-gray-700 leading-relaxed">{job.description || "Kh√¥ng c√≥ m√¥ t·∫£."}</p>
                                            </div>
                                            <div className="job-section">
                                                <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3"><FaBullseye className="text-[#441da0]"/>Y√™u c·∫ßu ·ª©ng vi√™n</h2>
                                                <p className="whitespace-pre-line text-gray-700 leading-relaxed">{job.requirements || "Kh√¥ng y√™u c·∫ßu c·ª• th·ªÉ."}</p>
                                            </div>
                                            <div className="job-section">
                                                <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3"><FaGift className="text-[#441da0]"/>Ch√≠nh s√°ch ƒë√£i ng·ªô</h2>
                                                <p className="whitespace-pre-line text-gray-700 leading-relaxed">{job.benefits || "Kh√¥ng c√≥ th√¥ng tin."}</p>
                                            </div>
                                            <div className="job-section">
                                                <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3"><FaEnvelope className="text-[#441da0]"/>C√°ch th·ª©c ·ª©ng tuy·ªÉn</h2>
                                                <p className="whitespace-pre-line text-gray-700 leading-relaxed">{job.how_to_apply || "Kh√¥ng c√≥ th√¥ng tin."}</p>
                                            </div>
                                        </div>
                </div>

                <div className="mt-8 text-center">
                    {/* B∆Ø·ªöC 4: C·∫≠p nh·∫≠t onClick c·ªßa n√∫t n√†y */}
                    <button onClick={handleApplyClick} className="bg-[#441da0] text-white px-8 py-3 rounded-lg shadow-lg hover:bg-indigo-800 transition font-bold text-lg">
                        ·ª®ng tuy·ªÉn ngay
                    </button>
                </div>
            </div>
            {showForm && (
                <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
                    <div className="bg-gray-50 p-6 sm:p-8 rounded-lg shadow-xl w-full max-w-3xl relative">
                        
                        {/* === TI√äU ƒê·ªÄ V√Ä N√öT ƒê√ìNG === */}
                        <div className="flex justify-between items-center pb-4 border-b mb-6">
                            <div>
                                <h2 className="text-2xl font-bold text-gray-800">·ª®ng tuy·ªÉn v·ªã tr√≠</h2>
                                <p className="text-[#441da0] font-semibold">{job.title}</p>
                            </div>
                            <button 
                                className="text-gray-400 hover:text-red-500 transition text-3xl disabled:text-gray-300" 
                                onClick={() => setShowForm(false)}
                                disabled={isSubmitting}
                            >
                                √ó
                            </button>
                        </div>

                        {/* === FORM === */}
                        <form className="space-y-6 overflow-y-auto max-h-[70vh] pr-2" onSubmit={handleSubmit} noValidate>
                            {/* === KH·ªêI TH√îNG TIN C√Å NH√ÇN === */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label htmlFor="full_name" className="block text-sm font-medium text-gray-700 mb-1">H·ªç v√† t√™n *</label>
                                    <input name="full_name" id="full_name" type="text" defaultValue={user?.name || ''} className="form-input" required />
                                </div>
                                <div>
                                    <label htmlFor="gender" className="block text-sm font-medium text-gray-700 mb-1">Gi·ªõi t√≠nh *</label>
                                    <select name="gender" id="gender" className="form-input" required>
                                        <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                                        <option value="Nam">Nam</option>
                                        <option value="N·ªØ">N·ªØ</option>
                                        <option value="Kh√°c">Kh√°c</option>
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                                    <input name="email" id="email" type="email" defaultValue={user?.email || ''} className="form-input" required />
                                </div>
                                <div>
                                    <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">S·ªë ƒëi·ªán tho·∫°i *</label>
                                    <input name="phone" id="phone" type="tel" placeholder="0123456789" className="form-input" required />
                                </div>
                                <div>
                                    <label htmlFor="birth_year" className="block text-sm font-medium text-gray-700 mb-1">NƒÉm sinh *</label>
                                    <input name="birth_year" id="birth_year" type="number" placeholder="1995" className="form-input" required />
                                </div>
                                <div>
                                    <label htmlFor="preferred_location" className="block text-sm font-medium text-gray-700 mb-1">B·∫°n mu·ªën l√†m vi·ªác t·∫°i *</label>
                                    <input name="preferred_location" id="preferred_location" type="text" placeholder="H√† N·ªôi, TP.HCM,..." className="form-input" required />
                                </div>
                            </div>

                            {/* === KH·ªêI KINH NGHI·ªÜM V√Ä CH·ª®NG CH·ªà === */}
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 pt-4 border-t">
                                <fieldset className="md:col-span-1">
                                    <legend className="text-sm font-medium text-gray-700 mb-2">Kinh nghi·ªám l√†m vi·ªác t·∫°i *</legend>
                                    <div className="space-y-2">
                                        <label className="flex items-center gap-2"><input type="radio" name="experience_places" value="C√¥ng ty n∆∞·ªõc ngo√†i" className="form-radio" required/> C√¥ng ty n∆∞·ªõc ngo√†i</label>
                                        <label className="flex items-center gap-2"><input type="radio" name="experience_places" value="C√¥ng ty Vi·ªát Nam" className="form-radio" /> C√¥ng ty Vi·ªát Nam</label>
                                        <label className="flex items-center gap-2"><input type="radio" name="experience_places" value="Nh√† n∆∞·ªõc/NGO" className="form-radio" /> Nh√† n∆∞·ªõc/NGO</label>
                                    </div>
                                </fieldset>
                                <fieldset className="md:col-span-1">
                                    <legend className="text-sm font-medium text-gray-700 mb-2">Ch·ª©ng ch·ªâ ngo·∫°i ng·ªØ *</legend>
                                    <div className="space-y-2">
                                        <label className="flex items-center gap-2"><input type="radio" name="certificates" value="Kh√¥ng c√≥" className="form-radio" required/> Kh√¥ng c√≥</label>
                                        <label className="flex items-center gap-2"><input type="radio" name="certificates" value="IELTS" className="form-radio" /> IELTS</label>
                                        <label className="flex items-center gap-2"><input type="radio" name="certificates" value="TOEIC" className="form-radio" /> TOEIC</label>
                                        <label className="flex items-center gap-2"><input type="radio" name="certificates" value="TOEFL" className="form-radio" /> TOEFL</label>
                                    </div>
                                </fieldset>
                                <fieldset className="md:col-span-1">
                                    <legend className="text-sm font-medium text-gray-700 mb-2">Lƒ©nh v·ª±c kinh nghi·ªám *</legend>
                                    <div className="space-y-2">
                                        <label className="flex items-center gap-2"><input type="checkbox" name="experience_fields" value="Marketing" className="form-checkbox"/> Marketing</label>
                                        <label className="flex items-center gap-2"><input type="checkbox" name="experience_fields" value="B√°n h√†ng" className="form-checkbox"/> B√°n h√†ng</label>
                                        <label className="flex items-center gap-2"><input type="checkbox" name="experience_fields" value="L·∫≠p tr√¨nh" className="form-checkbox"/> L·∫≠p tr√¨nh</label>
                                        <label className="flex items-center gap-2"><input type="checkbox" name="experience_fields" value="K·∫ø to√°n" className="form-checkbox"/> K·∫ø to√°n</label>
                                        <label className="flex items-center gap-2"><input type="checkbox" name="experience_fields" value="Thi·∫øt k·∫ø" className="form-checkbox"/> Thi·∫øt k·∫ø</label>
                                        <label className="flex items-center gap-2"><input type="checkbox" name="experience_fields" value="D·ªãch v·ª• kh√°ch h√†ng" className="form-checkbox"/> D·ªãch v·ª• kh√°ch h√†ng</label>
                                    </div>
                                </fieldset>
                            </div>
                            
                            {/* === KH·ªêI TH∆Ø GI·ªöI THI·ªÜU V√Ä CV === */}
                            <div className="pt-4 border-t">
                                <label htmlFor="cover_letter" className="block text-sm font-medium text-gray-700 mb-1">Th∆∞ ·ª©ng tuy·ªÉn (Cover Letter) *</label>
                                <textarea name="cover_letter" id="cover_letter" placeholder="Vi·∫øt v√†i d√≤ng gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n v√† t·∫°i sao b·∫°n ph√π h·ª£p v·ªõi v·ªã tr√≠ n√†y..." className="form-input h-28" required></textarea>
                            </div>
                            <div>
                                <label htmlFor="cv" className="block text-sm font-medium text-gray-700 mb-1">T·∫£i l√™n CV c·ªßa b·∫°n *</label>
                                <input name="cv" id="cv" type="file" accept=".pdf,.doc,.docx" className="block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-[#441da0] hover:file:bg-violet-100" required />
                                <p className="text-xs text-gray-500 mt-1">Ch·ªâ ch·∫•p nh·∫≠n file .pdf, .doc, .docx</p>
                            </div>

                            {/* === HI·ªÇN TH·ªä L·ªñI (N·∫æU C√ì) === */}
                            {submitError && (
                                <div className="text-center p-3 bg-red-100 text-red-700 rounded-md text-sm font-medium">
                                    {submitError}
                                </div>
                            )}
                            
                            {/* === C√ÅC N√öT B·∫§M === */}
                            <div className="flex gap-4 pt-6 border-t">
                                <button 
                                    type="submit" 
                                    className="w-full bg-[#441da0] text-white px-6 py-3 rounded-lg shadow hover:bg-indigo-800 transition font-bold disabled:bg-gray-400 disabled:cursor-not-allowed"
                                    disabled={isSubmitting}
                                >
                                    {isSubmitting ? 'ƒêANG G·ª¨I...' : 'G·ª¨I H·ªí S∆† ·ª®NG TUY·ªÇN'}
                                </button>
                                <button 
                                    type="button" 
                                    className="w-auto bg-gray-200 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-300 transition disabled:bg-gray-300 disabled:cursor-not-allowed"
                                    onClick={() => setShowForm(false)}
                                    disabled={isSubmitting}
                                >
                                    H·ªßy
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
            
        </div>
    );
}